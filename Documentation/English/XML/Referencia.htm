<html>
<head>
<title>XML: Reference</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<LINK rel="stylesheet" type="text/css" href="ifox.css">
</head>

<body bgcolor="#FFFFFF" text="#000000" topmargin=0 leftmargin=0>
<table border=0 width="100%" bgcolor="lightblue" class="top">
<tr>
    <td valign="center"><span style="font:8pt Verdana"><i>iFox.XML</i></span></td>
</tr>
<tr>
<td><span style="font:10pt Verdana"><b>Reference</b></span></td>
</tr>
</table>
<div class=text><br>
  <b>Properties</b> 
  <div class=tablediv>
    <table class=htmltable cellspacing="0">
      <tr> 
        <th width=100>Name</th>
        <th>Description</th>
      </tr>
      <tr> 
        <td><b>Parser</b></td>
        <td> <p>Value type: <b>String</b> <br>
            Default value: <b>Msxml2.DOMDocument.4.0</b><br>
            <br>
            The <b>XMLtoCursor</b> method <b></b>uses the Microsoft XML Parser 
            (<a href="http://www.msdn.microsoft.com/xml">www.msdn.microsoft.com/xml</a>) 
            to read the XML data. By default, <b>iFox.XML</b> uses the version 
            4 of the object, but it is possible to indicate the usage of another 
            version by setting this property with its class ID.</p>
          </td>
      </tr>
      <tr>
        <td><b>XSDType</b></td>
        <td> 
          <p>Value type: <b>Num&eacute;rico</b> <br>
            Default value: <b>XSD_INLINE</b><br>
            <br>
            Indicates how to generate the Schema:<br>
            XSD_NONE: No schema is generated at all.<br>
            XSD_INLINE: An &quot;inline&quot; schema is generated inside the XML 
            file.<br>
            XSD_EXTERNAL: Not implemented. Reserved for future versions.</p>
          </td>
      </tr>
    </table>
  </div>



<br><br>
  <b>Methods</b>
<div class=tablediv>
    <table class=htmltable cellspacing="0">
      <tr> 
        <th width=100>Name</th>
        <th>Description</th>
      </tr>
      <tr> 
        <td><b>AddTable</b></td>
        <td> 
          <p>Parameters: <strong>cTable as String</strong><br>
            <br>
            Returns: <strong>None</strong><br>
            <br>
            Adds a table to be included in the XML code generated by <b>CursorToXML</b> 
            method.</p>
          </td>
      </tr>
      <tr> 
        <td><b>CursorToXML</b></td>
        <td>
          <p>Parameters: <strong>cFile as String (optional)</strong><br>
            <br>
            Returns: <strong>Logical / String</strong><br>
            <br>
            Generates the XML code corresponding to the content of the tables 
            indicated using the <b>AddTable</b> method.</p>
          <p>If the <b>cFile</b> parameter is specified, the result will be written 
            right to this file, overwriting any existing content. Return value 
            is logical and indicates if the file was succesfully generated.<br>
            <br>
            If the <b>cFile</b> parameter is omitted, return value will be of 
            string type and will contain the XML code.</p>
          </td>
      </tr>
      <tr> 
        <td><b>WriteStartDocument</b></td>
        <td>
          <p>Parameters: <strong>None</strong><br>
            <br>
            Returns: <strong>None</strong><br>
            <br>
            This method is used when XML code is dinamically generated.</p>
          <p>It writes the root tag. This tag is needed for the XML code to be 
            valid. This method should be the first one to be executed and the 
            tag have to be closed at the end of the process using the <b>WriteEndDocument</b> 
            method.</p>
        </td>
      </tr>
      <tr> 
        <td><b>WriteEndDocument</b></td>
        <td> 
          <p>Parameters: <strong>None</strong><br>
            <br>
            Returns: <strong>None</strong><br>
            <br>
            This method is used when XML code is dinamically generated.</p>
          <p>It closes the root tag created by <b>WriteStartDocument</b>.</p>
        </td>
      </tr>
      <tr> 
        <td><b>WriteStartElement</b></td>
        <td>Parameters: <strong>cName as String</strong><br>
          <br>
          Returns: <strong>None</strong><br>
          <br>
          This method is used when XML code is dinamically generated.<br>
          <br>
          It writes the initial tag of an element.</td>
      </tr>
      <tr>
        <td><b>WriteEndElement</b></td>
        <td>Parameters: <strong>None</strong><br>
          <br>
          Returns: <strong>None</strong><br>
          <br>
          This method is used when XML code is dinamically generated.<br>
          <br>
          It writes the closing tag of an element created by <b>WriteStartElement</b>.</td>
      </tr>
      <tr> 
        <td><b>WriteElementString</b></td>
        <td>
          <p>Parameters: <strong>cName as String, cValue as String</strong><br>
            <br>
            Returns: <strong>None</strong><br>
            <br>
            This method is used when XML code is dinamically generated.<br>
            <br>
            It writes a node within an element created by <b>WriteStartElement</b>. 
            The <b>cName</b> parameter indicates the element name and <b>cValue</b> 
            the assigned value.</p>
          </td>
      </tr>
      <tr> 
        <td><b>GetXML</b></td>
        <td> <p>Parameters: <strong>None</strong><br>
            <br>
            Returns: <strong>String</strong><br>
            <br>
            This method is used when XML code is dinamically generated.<br>
            <br>
            Returns the dinamically generated XML code.</p>
          </td>
      </tr>
      <tr> 
        <td><b>XMLToCursor</b></td>
        <td>
          <p>Parameters: <strong>cXML as String, cCursorList as String (optional)</strong><br>
            <br>
            Returns: <strong>Logical</strong><br>
            <br>
            This method converts the XML code indicated in <b>cXML</b> parameter 
            in one or more cursors.</p>
          <p>Parameter <b>cCursorList</b> allows to indicate the name that the 
            generated cursor will receive. If the XML code includes more than 
            one cursor the desired names should be indicated separated by commas. 
            If this parameter is not specified the names included into the XML 
            code are used, so it is only recommended to ignore it when the code 
            has been generated using a known naming convention. If the XML code 
            includes more cursors than the ones indicated in <b>cCursorList</b>, 
            those will be ignored, avoiding that a malformed XML file generate 
            an excesive amount of cursors.<br>
            <br>
            If the XML code doesn't have a schema all the cursor fields would 
            be of character type, as it will be impossible to establish the correct 
            type.</p>
          <p>Note: This method requires at least version 3 of the Microsoft XML 
            Parser. See also the help on <b>Parser</b> property.</p>
          </td>
      </tr>
    </table>
  </div>



</div><br><hr noshade size=1 width="100%">
&nbsp;E-Mail: <a href="mailto:ifox@coliseosoftware.com.ar">ifox@coliseosoftware.com.ar</a><br><br>
&nbsp;(C) <b>Pablo Pioli / Coliseo Software</b>

</body>
</html>
